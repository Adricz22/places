{"version":3,"file":"static/js/925.54e9e230.chunk.js","mappings":"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","sources":["places/pages/UpdatePlace.js","shared/components/FormElements/Button.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Modal.js","shared/hooks/form-hook.js","shared/hooks/http-hook.js","shared/util/validators.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./PlaceForm.css\";\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const placeId = useParams().placeId;\n  const navigate = useNavigate();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_URL_BACKEND}/places/${placeId}`\n        );\n        setLoadedPlace(responseData.place);\n        setFormData(\n          {\n            title: {\n              value: responseData.place.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.place.description,\n              isValid: true,\n            },\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_URL_BACKEND}/places/${placeId}`,\n        \"PATCH\",\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n          authorization: \"Bearer \" + auth.token,\n        }\n      );\n      navigate(\"/\" + auth.userId + \"/places\");\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlace && (\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.description}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n","import { Link } from \"react-router-dom\";\nimport \"./Button.css\";\n\nconst Button = (props) => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || \"default\"} ${\n          props.inverse && \"button--inverse\"\n        } ${props.danger && \"button--danger\"}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || \"default\"} ${\n          props.inverse && \"button--inverse\"\n        } ${props.danger && \"button--danger\"}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      className={`button button--${props.size || \"default\"} ${\n        props.inverse && \"button--inverse\"\n      } ${props.danger && \"button--danger\"}`}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useReducer, useEffect } from \"react\";\n\nimport { validate } from \"../../util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\": {\n      return {\n        ...state,\n        isTouched: true,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || \"\",\n    isTouched: false,\n    isValid: props.initialValid || false,\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\",\n    });\n  };\n\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import { Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CSSTransition } from \"react-transition-group\";\n\nimport Backdrop from \"./Backdrop\";\nimport \"./Modal.css\";\n\nconst ModalOverlay = (props) => {\n  const content = (\n    <div className={`modal ${props.className}`} style={props.style}>\n      <header className={`modal__header ${props.headerClass}`}>\n        <h2>{props.header}</h2>\n      </header>\n      <form\n        onSubmit={\n          props.onSubmit ? props.onSubmit : (event) => event.preventDefault()\n        }\n      >\n        <div className={`modal__content ${props.contentClass}`}>\n          {props.children}\n        </div>\n        <footer className={`modal__footer ${props.footerClass}`}>\n          {props.footer}\n        </footer>\n      </form>\n    </div>\n  );\n  return ReactDOM.createPortal(content, document.getElementById(\"modal-hook\"));\n};\n\nconst Modal = (props) => {\n  return (\n    <Fragment>\n      {props.show && <Backdrop onClick={props.onCancel} />}\n      <CSSTransition\n        in={props.show}\n        mountOnEnter\n        unmountOnExit\n        timeout={200}\n        classNames=\"modal\"\n      >\n        <ModalOverlay {...props} />\n      </CSSTransition>\n    </Fragment>\n  );\n};\n\nexport default Modal;\n","import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n","import { useState, useCallback, useRef, useEffect } from \"react\";\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const activeHttpRequests = useRef([]);\n\n  const sendRequest = useCallback(\n    async (url, method = \"GET\", body = null, headers = {}) => {\n      setIsLoading(true);\n      const httpAbortCtrl = new AbortController();\n      activeHttpRequests.current.push(httpAbortCtrl);\n\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortCtrl.signal,\n        });\n\n        const responseData = await response.json();\n\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          (reqCtrl) => reqCtrl !== httpAbortCtrl\n        );\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setIsLoading(false);\n        return responseData;\n      } catch (err) {\n        setError(err.message);\n        setIsLoading(false);\n        throw err;\n      }\n    },\n    []\n  );\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort());\n    };\n  }, []);\n\n  return { isLoading, error, sendRequest, clearError };\n};\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n"],"names":["auth","useContext","AuthContext","isLoading","error","sendRequest","clearError","useHttpClient","loadedPlace","setLoadedPlace","useState","placeId","useParams","navigate","useNavigate","formState","inputHandler","setFormData","useForm","title","value","isValid","description","useEffect","async","responseData","process","place","err","fetchPlace","className","onClear","onSubmit","event","preventDefault","JSON","stringify","inputs","authorization","token","userId","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","disabled","props","href","size","inverse","danger","children","to","exact","onClick","inputReducer","state","action","val","validate","isTouched","inputState","dispatch","useReducer","changeHandler","target","touchHandler","placeholder","onChange","onBlur","rows","htmlFor","style","onCancel","header","show","footer","ModalOverlay","content","headerClass","contentClass","footerClass","ReactDOM","document","getElementById","Fragment","Backdrop","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","formReducer","formIsValid","inputId","initialInputs","initialFormValidity","useCallback","inputData","formValidity","setIsLoading","setError","activeHttpRequests","useRef","url","method","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","json","filter","reqCtrl","ok","Error","message","forEach","abortCtrl","abort","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","validator","trim","length","test"],"sourceRoot":""}